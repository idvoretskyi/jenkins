<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>This project is launched for each updated branch by build-debug-spawner.&#xd;
&#xd;
1. build rethinkdb on linux 64bit, store the result of the build&#xd;
2. launch test-runner for each test&#xd;
3. generate an html report of test success/failures</description>
  <logRotator>
    <daysToKeep>7</daysToKeep>
    <numToKeep>-1</numToKeep>
    <artifactDaysToKeep>-1</artifactDaysToKeep>
    <artifactNumToKeep>-1</artifactNumToKeep>
  </logRotator>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>BRANCH</name>
          <description>The branch to build.</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>EMAIL</name>
          <description>Notify this email if the build breaks. If empty, notify the committer of the latest commit in $BRANCH</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@1.1.26">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <name>github</name>
        <refspec></refspec>
        <url>ssh://git@github.com/rethinkdb/rethinkdb.git</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>github/$BRANCH</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <disableSubmodules>false</disableSubmodules>
    <recursiveSubmodules>false</recursiveSubmodules>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <authorOrCommitter>false</authorOrCommitter>
    <clean>false</clean>
    <wipeOutWorkspace>false</wipeOutWorkspace>
    <pruneBranches>false</pruneBranches>
    <remotePoll>false</remotePoll>
    <ignoreNotifyCommit>false</ignoreNotifyCommit>
    <useShallowClone>false</useShallowClone>
    <buildChooser class="hudson.plugins.git.util.DefaultBuildChooser"/>
    <gitTool>Default</gitTool>
    <browser class="hudson.plugins.git.browser.GithubWeb">
      <url>https://github.com/rethinkdb/rethinkdb/</url>
    </browser>
    <submoduleCfg class="list"/>
    <relativeTargetDir></relativeTargetDir>
    <reference></reference>
    <excludedRegions></excludedRegions>
    <excludedUsers></excludedUsers>
    <gitConfigName></gitConfigName>
    <gitConfigEmail></gitConfigEmail>
    <skipTag>false</skipTag>
    <includedRegions></includedRegions>
    <scmName></scmName>
  </scm>
  <assignedNode>build</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers class="vector"/>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/usr/bin/env bash

# Clean any artifacts from previous builds
rm -f build_output.tar.gz test.tar.gz symbols.tar.gz
rm -f rethinkdb.symbols rethinkdb-unittest.symbols
rm -f test_results test_results.html
rm -rf full_test_params tests test_data
cd src; make clean; cd -
cd bench/stress-client; make clean; cd -

# Build rethinkdb debug version
cd src
make -j12 UNIT_TESTS=1
if [[ $? -ne 0 ]]; then
  exit 1
fi
cd -

# Build rethinkdb stress-client
cd bench/stress-client
make -j12
if [[ $? -ne 0 ]]; then
  exit 1
fi
cd -

# Strip executables and put symbols in their own files for faster transfer to slaves
cp build/debug/rethinkdb rethinkdb.symbols
strip --only-keep-debug rethinkdb.symbols
strip build/debug/rethinkdb
objcopy --add-gnu-debuglink rethinkdb.symbols build/debug/rethinkdb

cp build/debug/rethinkdb-unittest rethinkdb-unittest.symbols
strip --only-keep-debug rethinkdb-unittest.symbols
strip build/debug/rethinkdb-unittest
objcopy --add-gnu-debuglink rethinkdb-unittest.symbols build/debug/rethinkdb-unittest

strip bench/stress-client/stress

# Create zip of build results and files needed for test
tar czf symbols.tar.gz rethinkdb.symbols rethinkdb-unittest.symbols
tar czf build_output.tar.gz build/debug/rethinkdb build/debug/web build/drivers drivers
tar czf test.tar.gz test build/debug/rethinkdb-unittest bench/stress-client/stress

# Archive the build_output.tar.gz, symbols.tar.gz, and test.tar.gz files
rsync symbols.tar.gz build_output.tar.gz test.tar.gz dr-doom.local:~/jobs/$JOB_NAME/builds/$BUILD_NUMBER/archive/

# Generate test parameter files for the parameterized trigger below
mkdir full_test_params
./scripts/generate_test_param_files.py --test-dir test/full_test --output-dir full_test_params
if [[ $? -ne 0 ]]; then
  exit 1
fi</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/usr/bin/env bash
rsync -r --exclude &quot;core&quot; dr-doom.local:~/jobs/$JOB_NAME/builds/$BUILD_NUMBER/test_data ./

# Each test that ran has a &quot;result_string&quot; file, cat those all into one file
cat test_data/*/result_string &gt;&gt; test_data/test_results
rm -f test_data/*/result_string

# Create the html report directory which will be published at the end
mkdir tests</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/usr/bin/env python

import os, sys, subprocess
from jinja2 import Template

# Aggregate test output
# template parameters: build_string, test_results (array where each item contains id, command, and result)

def read_results(input_file):
  results = []
  file_in = open(input_file, &apos;r&apos;)
  for line in file_in:
    line = line.strip()
    if len(line) == 0:
      continue
    (result, node_name, runner_id, id, duration, command) = line.split(&apos; &apos;, 5)
    runner_id = int(runner_id)
    id = int(id)
    results.append({&quot;result&quot;: result, &quot;node_name&quot;: node_name, &quot;runner_id&quot;: runner_id, &quot;id&quot;: id, &quot;duration&quot;: duration, &quot;command&quot;: command})
  return results

def generate_build_html(input_file, output_file, build_number, git_info, test_results):
  file_in = open(input_file, &apos;r&apos;)
  file_out = open(output_file, &apos;w&apos;)
  template = Template(file_in.read())
  file_out.write(template.render(build_number = build_number,
                                 git_info = git_info,
                                 test_results = test_results))

def generate_test_html(input_file, output_file, build_number, test, git_info, test_data):
  file_in = open(input_file, &apos;r&apos;)
  file_out = open(output_file, &apos;w&apos;)
  template = Template(file_in.read())
  file_out.write(template.render(build_number = build_number,
                                 test = test,
                                 git_info = git_info,
                                 test_data = test_data))

def main():
  build_number = os.environ[&quot;BUILD_NUMBER&quot;]
  git_info = { &quot;branch&quot;: os.environ[&quot;BRANCH&quot;],
               &quot;commit&quot;: os.environ[&quot;GIT_COMMIT&quot;][:8],
               &quot;message&quot;: subprocess.check_output([&apos;git&apos;, &apos;show&apos;, &apos;-s&apos;, &apos;--format=&quot;%B&quot;&apos;]) }

  test_results = read_results(&quot;test_data/test_results&quot;)
  test_results = sorted(test_results, key = lambda k: k[&quot;id&quot;])
  generate_build_html(&quot;test_results.html.template&quot;,
                      &quot;tests/test_results.html&quot;,
                      build_number,
                      git_info,
                      test_results)

  if not os.path.exists(&quot;tests&quot;):
    os.mkdir(&quot;tests&quot;)

  for test in test_results:
    test_data = []
    console_out = []
    # Read in all files for each test
    for directory, subdirectory, files in os.walk(&quot;test_data/%d&quot; % test[&quot;id&quot;]):
      for filename in files:
        f_in = open(os.path.join(directory, filename), &quot;r&quot;)
        out = { &quot;name&quot;: filename, &quot;data&quot;: unicode(f_in.read(), errors = &quot;replace&quot;) }
        if filename == &quot;console_out&quot;:
          console_out = out
        else:
          test_data.append(out)
    test_data.sort()
    test_data = [console_out] + test_data   # We want console_out to be the first item shown
    
    # Generate an html file containing the test output
    generate_test_html(&quot;test_output.html.template&quot;,
                       &quot;tests/test_%d.html&quot; % test[&quot;id&quot;],
                       build_number,
                       test,
                       git_info,
                       test_data)

if __name__ == &quot;__main__&quot;:
    main()</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <htmlpublisher.HtmlPublisher plugin="htmlpublisher@1.0">
      <reportTargets>
        <htmlpublisher.HtmlPublisherTarget>
          <reportName>Test Results</reportName>
          <reportDir>tests</reportDir>
          <reportFiles>test_results.html</reportFiles>
          <keepAll>true</keepAll>
          <wrapperName>htmlpublisher-wrapper.html</wrapperName>
        </htmlpublisher.HtmlPublisherTarget>
      </reportTargets>
    </htmlpublisher.HtmlPublisher>
    <hudson.plugins.parameterizedtrigger.BuildTrigger plugin="parameterized-trigger@2.16">
      <configs>
        <hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
          <configs>
            <hudson.plugins.git.GitRevisionBuildParameters plugin="git@1.1.26">
              <combineQueuedCommits>false</combineQueuedCommits>
            </hudson.plugins.git.GitRevisionBuildParameters>
            <hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
              <properties>PARENT_JOB=$JOB_NAME
PARENT_NUMBER=$BUILD_NUMBER
EMAIL=$EMAIL
SUBJECT=Failed tests</properties>
            </hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
          </configs>
          <projects>notify-result</projects>
          <condition>UNSTABLE_OR_WORSE</condition>
          <triggerWithNoParameters>false</triggerWithNoParameters>
        </hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
      </configs>
    </hudson.plugins.parameterizedtrigger.BuildTrigger>
  </publishers>
  <buildWrappers>
    <hudson.plugins.build__timeout.BuildTimeoutWrapper plugin="build-timeout@1.11">
      <timeoutMinutes>240</timeoutMinutes>
      <failBuild>false</failBuild>
      <writingDescription>false</writingDescription>
      <timeoutPercentage>0</timeoutPercentage>
      <timeoutType>absolute</timeoutType>
      <timeoutMinutesElasticDefault>3</timeoutMinutesElasticDefault>
    </hudson.plugins.build__timeout.BuildTimeoutWrapper>
    <com.michelin.cio.hudson.plugins.copytoslave.CopyToSlaveBuildWrapper plugin="copy-to-slave@1.4">
      <includes>test_output.html.template,test_results.html.template</includes>
      <excludes></excludes>
      <flatten>false</flatten>
      <includeAntExcludes>false</includeAntExcludes>
      <hudsonHomeRelative>false</hudsonHomeRelative>
      <relativeTo>userContent</relativeTo>
    </com.michelin.cio.hudson.plugins.copytoslave.CopyToSlaveBuildWrapper>
  </buildWrappers>
</project>